/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace BubbleCouple
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FallBall : TBase
  {
    private sbyte _reason;
    private List<int> _ballIds;
    private int _collisionBallId;

    public sbyte Reason
    {
      get
      {
        return _reason;
      }
      set
      {
        __isset.reason = true;
        this._reason = value;
      }
    }

    public List<int> BallIds
    {
      get
      {
        return _ballIds;
      }
      set
      {
        __isset.ballIds = true;
        this._ballIds = value;
      }
    }

    public int CollisionBallId
    {
      get
      {
        return _collisionBallId;
      }
      set
      {
        __isset.collisionBallId = true;
        this._collisionBallId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reason;
      public bool ballIds;
      public bool collisionBallId;
    }

    public FallBall() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.Byte) {
                Reason = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.List) {
                {
                  BallIds = new List<int>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    int _elem6;
                    _elem6 = iprot.ReadI32();
                    BallIds.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.I32) {
                CollisionBallId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("FallBall");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reason) {
          field.Name = "reason";
          field.Type = TType.Byte;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Reason);
          oprot.WriteFieldEnd();
        }
        if (BallIds != null && __isset.ballIds) {
          field.Name = "ballIds";
          field.Type = TType.List;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, BallIds.Count));
            foreach (int _iter7 in BallIds)
            {
              oprot.WriteI32(_iter7);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.collisionBallId) {
          field.Name = "collisionBallId";
          field.Type = TType.I32;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CollisionBallId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FallBall(");
      bool __first = true;
      if (__isset.reason) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Reason: ");
        __sb.Append(Reason);
      }
      if (BallIds != null && __isset.ballIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BallIds: ");
        __sb.Append(BallIds);
      }
      if (__isset.collisionBallId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CollisionBallId: ");
        __sb.Append(CollisionBallId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}

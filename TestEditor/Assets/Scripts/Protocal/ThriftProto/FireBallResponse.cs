/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace BubbleCouple
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FireBallResponse : TBase
  {
    private int _type;
    private Vector2D _dir;
    private Vector2D _collisionPoint;
    private GridCoord _destGrid;
    private int _ballId;
    private double _speed;
    private sbyte _result;
    private Vector2D _startPosition;

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public Vector2D Dir
    {
      get
      {
        return _dir;
      }
      set
      {
        __isset.dir = true;
        this._dir = value;
      }
    }

    public Vector2D CollisionPoint
    {
      get
      {
        return _collisionPoint;
      }
      set
      {
        __isset.collisionPoint = true;
        this._collisionPoint = value;
      }
    }

    public GridCoord DestGrid
    {
      get
      {
        return _destGrid;
      }
      set
      {
        __isset.destGrid = true;
        this._destGrid = value;
      }
    }

    public int BallId
    {
      get
      {
        return _ballId;
      }
      set
      {
        __isset.ballId = true;
        this._ballId = value;
      }
    }

    public double Speed
    {
      get
      {
        return _speed;
      }
      set
      {
        __isset.speed = true;
        this._speed = value;
      }
    }

    public sbyte Result
    {
      get
      {
        return _result;
      }
      set
      {
        __isset.result = true;
        this._result = value;
      }
    }

    public Vector2D StartPosition
    {
      get
      {
        return _startPosition;
      }
      set
      {
        __isset.startPosition = true;
        this._startPosition = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool type;
      public bool dir;
      public bool collisionPoint;
      public bool destGrid;
      public bool ballId;
      public bool speed;
      public bool result;
      public bool startPosition;
    }

    public FireBallResponse() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.I32) {
                Type = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.Struct) {
                Dir = new Vector2D();
                Dir.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.Struct) {
                CollisionPoint = new Vector2D();
                CollisionPoint.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.Struct) {
                DestGrid = new GridCoord();
                DestGrid.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 50:
              if (field.Type == TType.I32) {
                BallId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 60:
              if (field.Type == TType.Double) {
                Speed = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 70:
              if (field.Type == TType.Byte) {
                Result = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 80:
              if (field.Type == TType.Struct) {
                StartPosition = new Vector2D();
                StartPosition.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("FireBallResponse");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Type);
          oprot.WriteFieldEnd();
        }
        if (Dir != null && __isset.dir) {
          field.Name = "dir";
          field.Type = TType.Struct;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          Dir.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (CollisionPoint != null && __isset.collisionPoint) {
          field.Name = "collisionPoint";
          field.Type = TType.Struct;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          CollisionPoint.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DestGrid != null && __isset.destGrid) {
          field.Name = "destGrid";
          field.Type = TType.Struct;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          DestGrid.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.ballId) {
          field.Name = "ballId";
          field.Type = TType.I32;
          field.ID = 50;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(BallId);
          oprot.WriteFieldEnd();
        }
        if (__isset.speed) {
          field.Name = "speed";
          field.Type = TType.Double;
          field.ID = 60;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Speed);
          oprot.WriteFieldEnd();
        }
        if (__isset.result) {
          field.Name = "result";
          field.Type = TType.Byte;
          field.ID = 70;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Result);
          oprot.WriteFieldEnd();
        }
        if (StartPosition != null && __isset.startPosition) {
          field.Name = "startPosition";
          field.Type = TType.Struct;
          field.ID = 80;
          oprot.WriteFieldBegin(field);
          StartPosition.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FireBallResponse(");
      bool __first = true;
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (Dir != null && __isset.dir) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Dir: ");
        __sb.Append(Dir== null ? "<null>" : Dir.ToString());
      }
      if (CollisionPoint != null && __isset.collisionPoint) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CollisionPoint: ");
        __sb.Append(CollisionPoint== null ? "<null>" : CollisionPoint.ToString());
      }
      if (DestGrid != null && __isset.destGrid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DestGrid: ");
        __sb.Append(DestGrid== null ? "<null>" : DestGrid.ToString());
      }
      if (__isset.ballId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BallId: ");
        __sb.Append(BallId);
      }
      if (__isset.speed) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Speed: ");
        __sb.Append(Speed);
      }
      if (__isset.result) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Result: ");
        __sb.Append(Result);
      }
      if (StartPosition != null && __isset.startPosition) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StartPosition: ");
        __sb.Append(StartPosition== null ? "<null>" : StartPosition.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}

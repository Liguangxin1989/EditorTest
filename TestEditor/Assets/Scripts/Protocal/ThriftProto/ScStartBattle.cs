/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace BubbleCouple
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ScStartBattle : TBase
  {
    private long _startTime;
    private BubbleCouple.SceneTransform _sceneTransform;
    private List<int> _ballQueueA;
    private List<int> _ballQueueB;

    public long StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }

    public BubbleCouple.SceneTransform SceneTransform
    {
      get
      {
        return _sceneTransform;
      }
      set
      {
        __isset.sceneTransform = true;
        this._sceneTransform = value;
      }
    }

    public List<int> BallQueueA
    {
      get
      {
        return _ballQueueA;
      }
      set
      {
        __isset.ballQueueA = true;
        this._ballQueueA = value;
      }
    }

    public List<int> BallQueueB
    {
      get
      {
        return _ballQueueB;
      }
      set
      {
        __isset.ballQueueB = true;
        this._ballQueueB = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool startTime;
      public bool sceneTransform;
      public bool ballQueueA;
      public bool ballQueueB;
    }

    public ScStartBattle() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 10:
              if (field.Type == TType.I64) {
                StartTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.Struct) {
                SceneTransform = new BubbleCouple.SceneTransform();
                SceneTransform.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.List) {
                {
                  BallQueueA = new List<int>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    int _elem2;
                    _elem2 = iprot.ReadI32();
                    BallQueueA.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.List) {
                {
                  BallQueueB = new List<int>();
                  TList _list3 = iprot.ReadListBegin();
                  for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                  {
                    int _elem5;
                    _elem5 = iprot.ReadI32();
                    BallQueueB.Add(_elem5);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ScStartBattle");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.startTime) {
          field.Name = "startTime";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartTime);
          oprot.WriteFieldEnd();
        }
        if (SceneTransform != null && __isset.sceneTransform) {
          field.Name = "sceneTransform";
          field.Type = TType.Struct;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          SceneTransform.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (BallQueueA != null && __isset.ballQueueA) {
          field.Name = "ballQueueA";
          field.Type = TType.List;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, BallQueueA.Count));
            foreach (int _iter6 in BallQueueA)
            {
              oprot.WriteI32(_iter6);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (BallQueueB != null && __isset.ballQueueB) {
          field.Name = "ballQueueB";
          field.Type = TType.List;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, BallQueueB.Count));
            foreach (int _iter7 in BallQueueB)
            {
              oprot.WriteI32(_iter7);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ScStartBattle(");
      bool __first = true;
      if (__isset.startTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StartTime: ");
        __sb.Append(StartTime);
      }
      if (SceneTransform != null && __isset.sceneTransform) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SceneTransform: ");
        __sb.Append(SceneTransform== null ? "<null>" : SceneTransform.ToString());
      }
      if (BallQueueA != null && __isset.ballQueueA) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BallQueueA: ");
        __sb.Append(BallQueueA);
      }
      if (BallQueueB != null && __isset.ballQueueB) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BallQueueB: ");
        __sb.Append(BallQueueB);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
